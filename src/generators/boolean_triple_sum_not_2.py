from src.classes.Position import Position
from src.classes.Neuron import Neuron
from src.classes.Rule import Rule
from src.classes.System import System
from src.classes.Synapse import Synapse


def generate_boolean_triple_sum_not_2_system(b1: int, b2: int, b3: int) -> System:
    neurons = [
        Neuron(
            id="env_{in_{1}}",
            type_="input",
            position=Position(0, 0),
            rules=[],
            content=[b1] * 10,
        ),
        Neuron(
            id="env_{in_{2}}",
            type_="input",
            position=Position(0, 0),
            rules=[],
            content=[b2] * 10,
        ),
        Neuron(
            id="env_{in_{3}}",
            type_="input",
            position=Position(0, 0),
            rules=[],
            content=[b3] * 10,
        ),
        Neuron(
            id="in_{1}",
            type_="regular",
            position=Position(0, 0),
            rules=[Rule(regex="^a$", consumed=1, produced=1, delay=0)],
            content=0,
        ),
        Neuron(
            id="11",
            type_="regular",
            position=Position(0, 0),
            rules=[Rule(regex="^a$", consumed=1, produced=1, delay=0)],
            content=0,
        ),
        Neuron(
            id="in_{2}",
            type_="regular",
            position=Position(0, 0),
            rules=[Rule(regex="^a$", consumed=1, produced=1, delay=0)],
            content=0,
        ),
        Neuron(
            id="21",
            type_="regular",
            position=Position(0, 0),
            rules=[Rule(regex="^a$", consumed=1, produced=1, delay=0)],
            content=0,
        ),
        Neuron(
            id="22",
            type_="regular",
            position=Position(0, 0),
            rules=[Rule(regex="^a$", consumed=1, produced=1, delay=0)],
            content=0,
        ),
        Neuron(
            id="in_{3}",
            type_="regular",
            position=Position(0, 0),
            rules=[Rule(regex="^a$", consumed=1, produced=1, delay=0)],
            content=0,
        ),
        Neuron(
            id="31",
            type_="regular",
            position=Position(0, 0),
            rules=[Rule(regex="^a$", consumed=1, produced=1, delay=0)],
            content=0,
        ),
        Neuron(
            id="32",
            type_="regular",
            position=Position(0, 0),
            rules=[Rule(regex="^a$", consumed=1, produced=1, delay=0)],
            content=0,
        ),
        Neuron(
            id="33",
            type_="regular",
            position=Position(0, 0),
            rules=[Rule(regex="^a$", consumed=1, produced=1, delay=0)],
            content=0,
        ),
        Neuron(
            id="34",
            type_="regular",
            position=Position(0, 0),
            rules=[Rule(regex="^a$", consumed=1, produced=1, delay=0)],
            content=0,
        ),
        Neuron(
            id="41",
            type_="regular",
            position=Position(0, 0),
            rules=[Rule(regex="^a$", consumed=1, produced=1, delay=0)],
            content=1,
        ),
        Neuron(
            id="42",
            type_="regular",
            position=Position(0, 0),
            rules=[Rule(regex="^a$", consumed=1, produced=1, delay=0)],
            content=1,
        ),
        Neuron(
            id="43",
            type_="regular",
            position=Position(0, 0),
            rules=[Rule(regex="^a$", consumed=1, produced=1, delay=0)],
            content=0,
        ),
        Neuron(
            id="44",
            type_="regular",
            position=Position(0, 0),
            rules=[Rule(regex="^a$", consumed=1, produced=1, delay=0)],
            content=0,
        ),
        Neuron(
            id="out",
            type_="regular",
            position=Position(0, 0),
            rules=[
                Rule(regex="^a$", consumed=1, produced=1, delay=0),
                Rule(regex="^a{2}$", consumed=2, produced=1, delay=0),
                Rule(regex="^a{3}$", consumed=3, produced=1, delay=0),
                Rule(regex="^a{4}$", consumed=4, produced=0, delay=0),
                Rule(regex="^a{5}$", consumed=5, produced=1, delay=0),
                Rule(regex="^a{6}$", consumed=6, produced=0, delay=0),
                Rule(regex="^a{7}$", consumed=7, produced=0, delay=0),
                Rule(regex="^a{8}$", consumed=8, produced=1, delay=0),
            ],
            content=0,
        ),
        Neuron(
            id="env_{out}",
            type_="output",
            position=Position(0, 0),
            rules=[],
            content=[],
        ),
    ]

    synapses = [
        Synapse(from_="env_{in_{1}}", to="in_{1}", weight=1),
        Synapse(from_="env_{in_{2}}", to="in_{2}", weight=1),
        Synapse(from_="env_{in_{3}}", to="in_{3}", weight=1),
        Synapse(from_="in_{1}", to="11", weight=1),
        Synapse(from_="11", to="out", weight=1),
        Synapse(from_="in_{2}", to="21", weight=1),
        Synapse(from_="in_{2}", to="22", weight=1),
        Synapse(from_="21", to="out", weight=1),
        Synapse(from_="22", to="out", weight=1),
        Synapse(from_="in_{3}", to="31", weight=1),
        Synapse(from_="in_{3}", to="32", weight=1),
        Synapse(from_="in_{3}", to="33", weight=1),
        Synapse(from_="in_{3}", to="34", weight=1),
        Synapse(from_="31", to="out", weight=1),
        Synapse(from_="32", to="out", weight=1),
        Synapse(from_="33", to="out", weight=1),
        Synapse(from_="34", to="out", weight=1),
        Synapse(from_="41", to="42", weight=1),
        Synapse(from_="42", to="41", weight=1),
        Synapse(from_="42", to="43", weight=1),
        Synapse(from_="43", to="44", weight=1),
        Synapse(from_="44", to="out", weight=1),
        Synapse(from_="out", to="env_{out}", weight=1),
    ]

    return System(neurons, synapses)
